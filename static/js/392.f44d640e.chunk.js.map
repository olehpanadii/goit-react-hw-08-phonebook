{"version":3,"file":"static/js/392.f44d640e.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.list;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.isError;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.spacing(5)};\n  max-width: 300px;\n  border: 1px solid black;\n  border-radius: 8px;\n  padding: 30px;\n`;\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: ${p => p.theme.spacing(4)};\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport { FaRegIdCard } from 'react-icons/fa';\nimport * as Yup from 'yup';\nimport { Button, StyledForm } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too Short!').required('Required'),\n  number: Yup.string()\n    .matches(\n      /^\\d{3}-\\d{2}-\\d{2}$/,\n      'Invalid phone number. Please enter a valid phone number in the format XXX-XX-XX.'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      id: nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n    console.log(values);\n    const isContactDublicate = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    if (isContactDublicate) {\n      Notiflix.Notify.failure(`${newContact.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <label>Name </label>\n          <Field name=\"name\" type=\"text\" placeholder=\"Name Surname\" />\n          <ErrorMessage component=\"div\" name=\"name\" />\n\n          <label>Number</label>\n          <Field name=\"number\" type=\"tel\" placeholder=\"000-00-00\" />\n          <ErrorMessage component=\"div\" name=\"phone\" />\n\n          <Button type=\"submit\">\n            <span>Add contact</span> <FaRegIdCard />\n          </Button>\n        </StyledForm>\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const DeleteBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: ${p => p.theme.spacing(4)};\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\nexport const ContactNumber = styled.div`\n  display: flex;\n  gap: ${p => p.theme.spacing(6)};\n  align-items: center;\n`;\n","import { FaPhoneAlt, FaUserTimes } from 'react-icons/fa';\nimport { ContactItem, ContactNumber, DeleteBtn } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const visibleContacts = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id}>\n          <h3>{name}</h3>\n          <ContactNumber>\n            <p>\n              <FaPhoneAlt /> {number}\n            </p>\n            <DeleteBtn onClick={() => dispatch(deleteContact(id))}>\n              Delete <FaUserTimes />\n            </DeleteBtn>\n          </ContactNumber>\n        </ContactItem>\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.spacing(4)};\n  max-width: 300px;\n  padding: 30px;\n  border: 1px solid grey;\n  border-radius: 8px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FilterWrapper } from './Filter.styled';\nimport { filteredContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <FilterWrapper>\n      <label>Find contact by name</label>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={evt => {\n          dispatch(filteredContacts(evt.target.value));\n        }}\n        placeholder=\"Search contact\"\n      />\n    </FilterWrapper>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <div>{isLoading && 'Request in progress...'}</div>\n\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","list","selectLoading","isLoading","selectFilter","filter","StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","p","theme","spacing","Button","_templateObject2","contactSchema","Yup","shape","name","min","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","newContact","id","nanoid","console","log","some","contact","toLowerCase","Notiflix","concat","addContact","_jsxs","Field","type","placeholder","ErrorMessage","component","FaRegIdCard","DeleteBtn","ContactItem","ContactNumber","_templateObject3","ContactList","visibleContacts","includes","map","FaPhoneAlt","onClick","deleteContact","FaUserTimes","FilterWrapper","Filter","value","onChange","evt","filteredContacts","target","Tasks","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}